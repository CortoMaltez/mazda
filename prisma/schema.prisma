// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  tier          String    @default("starter") // starter, growth, scale
  statePreference String? // Delaware, Wyoming, Nevada, etc.
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  companies     Company[]
  subscriptions Subscription[]
  payments      Payment[]
  notifications Notification[]
  userAddons    UserAddon[]
  
  @@map("users")
}

model Company {
  id            String    @id @default(cuid())
  name          String
  state         String    // Delaware, Wyoming, Nevada, etc.
  formationDate DateTime?
  status        String    @default("pending") // pending, active, suspended
  ein           String?   // Employer Identification Number
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents     Document[]
  
  @@map("companies")
}

model Subscription {
  id        String   @id @default(cuid())
  tier      String   // starter, growth, scale
  startDate DateTime @default(now())
  endDate   DateTime
  status    String   @default("active") // active, cancelled, expired
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  currency  String   @default("USD")
  status    String   @default("pending") // pending, completed, failed, refunded
  stripeId  String?  // Stripe payment intent ID
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model Document {
  id         String   @id @default(cuid())
  type       String   // llc_formation, ein_letter, operating_agreement, etc.
  url        String
  status     String   @default("pending") // pending, generated, delivered
  companyId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // deadline_reminder, document_ready, payment_due, etc.
  message   String
  read      Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model AddonModule {
  id          String   @id @default(cuid())
  name        String   // banking_pro, tax_optimization, compliance_plus, etc.
  price       Float
  description String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userAddons  UserAddon[]
  
  @@map("addon_modules")
}

model UserAddon {
  id           String      @id @default(cuid())
  userId       String
  addonId      String
  startDate    DateTime    @default(now())
  endDate      DateTime
  status       String      @default("active") // active, cancelled, expired
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Relations
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  addon        AddonModule @relation(fields: [addonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, addonId])
  @@map("user_addons")
} 