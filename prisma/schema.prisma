// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(VISITOR)
  phone     String?
  country   String?
  language  String   @default("en")
  
  // Facebook integration
  facebookId String? @unique
  facebookAccessToken String?
  facebookConnected Boolean @default(false)
  
  // AI usage tracking
  aiTokenUsage Int @default(0)
  aiLastUsage  DateTime @updatedAt
  aiMonthlyBudget Int @default(1000000) // 1M tokens par défaut
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  companies Company[]
  payments  Payment[]
  documents Document[]
  clientDocuments ClientDocument[]
  consultations Consultation[]
  supportTickets SupportTicket[]
  llcFormationWorkflows LLCFormationWorkflow[]
  aiAnalyses AIAnalysis[]
  auditLogs AuditLog[]
  complianceTasks ComplianceTask[]
  accounts Account[]
  sessions Session[]
  notifications Notification[]
  apiAccess APIAccess[]
  webhooks Webhook[]
  
  // Account Manager relations
  managedCompanies Company[] @relation("AccountManager")

  // Consultant permissions
  consultantPermissions ConsultantPermission[] @relation("ConsultantPermissions")
  grantedPermissions ConsultantPermission[] @relation("AdminGrantedPermissions")

  @@map("users")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  state       String
  businessType String
  formationDate DateTime?
  status      CompanyStatus @default(PENDING)
  subscriptionType SubscriptionType @default(ANNUAL)
  subscriptionStartDate DateTime?
  subscriptionEndDate DateTime?
  
  // Formation details
  ein         String?  // EIN number
  operatingAgreement Boolean @default(false)
  bankAccountAssistance Boolean @default(false)
  
  // Compliance status
  registeredAgent Boolean @default(false)
  businessAddress String?
  mailScanning Boolean @default(false)
  annualReportFiled Boolean @default(false)
  annualReportDueDate DateTime?
  boiReportFiled Boolean @default(false)
  boiReportDueDate DateTime?
  
  // Tax compliance
  form5472Filed Boolean @default(false)
  form5472DueDate DateTime?
  form1120Filed Boolean @default(false)
  form1120DueDate DateTime?
  
  // Additional services
  itinAssistance Boolean @default(false)
  premiumBankAssistance Boolean @default(false)
  trademarkFiling Boolean @default(false)
  
  // Google Workspace integration
  googleDriveHubId String? // ID du dossier principal sur Google Drive
  
  userId      String
  accountManagerId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountManager User?  @relation("AccountManager", fields: [accountManagerId], references: [id])
  documents  Document[]
  payments   Payment[]
  mailItems  MailItem[]
  supportTickets SupportTicket[]
  llcFormationWorkflows LLCFormationWorkflow[]
  complianceTasks ComplianceTask[]

  @@map("companies")
}

model Document {
  id        String   @id @default(cuid())
  name      String
  type      DocumentType
  fileUrl   String
  fileSize  Int
  description String?
  isRequired Boolean @default(false)
  dueDate   DateTime?
  userId    String
  companyId String?
  uploadedBy String? // admin user ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model ClientDocument {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  fileName   String
  storageUrl String   // URL vers le fichier dans Google Cloud Storage ou lien vers Google Drive
  uploadedAt DateTime @default(now())

  @@map("client_documents")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  type          PaymentType   @default(SUBSCRIPTION)
  stripePaymentId String?
  stripeInvoiceId String?
  description   String?
  userId        String
  companyId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model MailItem {
  id          String   @id @default(cuid())
  subject     String?
  sender      String
  receivedDate DateTime
  scanned     Boolean  @default(false)
  scannedUrl  String?
  action      MailAction @default(PENDING)
  notes       String?
  companyId   String
  processedBy String? // admin user ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("mail_items")
}

model Consultation {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  currency    String   @default("USD")
  status      ConsultationStatus @default(PENDING)
  calendlyUrl String?
  notes       String?
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("consultations")
}

model SupportTicket {
  id          String   @id @default(cuid())
  subject     String
  message     String
  priority    TicketPriority @default(MEDIUM)
  status      TicketStatus @default(OPEN)
  userId      String
  companyId   String?
  assignedTo  String? // admin user ID
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model LLCFormationWorkflow {
  id          String   @id @default(cuid())
  userId      String
  companyId   String?
  step        String   // current step in the workflow
  status      String   @default("in_progress") // "in_progress", "completed", "failed"
  data        String?  // JSON data for the current step
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("llc_formation_workflows")
}

model AIAnalysis {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "pricing", "competitor", "market"
  data        String   // JSON analysis data
  insights    String?  // JSON insights
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_analyses")
}

model ConsultantPermission {
  id          String   @id @default(cuid())
  consultantId String
  grantedBy   String
  permissions String   // JSON array of permissions
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  consultant User @relation("ConsultantPermissions", fields: [consultantId], references: [id], onDelete: Cascade)
  admin      User @relation("AdminGrantedPermissions", fields: [grantedBy], references: [id], onDelete: Cascade)

  @@map("consultant_permissions")
}

// MIVION - Intelligence Concurrentielle
model Competitor {
  id                String   @id @default(cuid())
  name              String
  website           String
  lastUpdated       DateTime @default(now())
  pricingData       String?  // JSON des prix par état
  servicesData      String?  // JSON des services
  adsData           String?  // JSON des campagnes pub
  marketPositionData String? // JSON position marché
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("competitors")
}

model CompetitiveInsight {
  id            String   @id @default(cuid())
  type          String   // 'pricing', 'service', 'marketing', 'threat', 'opportunity'
  severity      String   // 'low', 'medium', 'high', 'critical'
  description   String
  impact        String
  recommendation String
  estimatedValue Float
  createdAt     DateTime @default(now())

  @@map("competitive_insights")
}

// TRACKING FINANCIER & ROI - Mise à jour avec les nouveaux modèles
model AdCampaign {
  id              String   @id @default(cuid())
  platform        String   // 'facebook', 'google', 'linkedin'
  name            String
  budget          Float
  spent           Float    @default(0)
  impressions     Int      @default(0)
  clicks          Int      @default(0)
  conversions     Int      @default(0)
  revenue         Float    @default(0)
  roi             Float    @default(0)
  status          String   @default("active") // 'active', 'paused', 'completed'
  startDate       DateTime @default(now())
  endDate         DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  creatives AdCreative[]
  performance CampaignPerformance[]

  @@map("ad_campaigns")
}

model AdCreative {
  id         String     @id @default(cuid())
  campaign   AdCampaign @relation(fields: [campaignId], references: [id])
  campaignId String
  type       String     // "IMAGE", "VIDEO"
  storageUrl String     // URL vers le fichier dans le bucket Google Cloud Storage
  copyText   String?
  createdAt  DateTime   @default(now())

  @@map("ad_creatives")
}

model CampaignPerformance {
  id          String     @id @default(cuid())
  campaign    AdCampaign @relation(fields: [campaignId], references: [id])
  campaignId  String
  date        DateTime
  impressions Int
  clicks      Int
  cost        Float

  @@map("campaign_performance")
}

model FinancialMetric {
  id              String   @id @default(cuid())
  date            DateTime @default(now())
  revenue         Float    @default(0)
  expenses        Float    @default(0)
  profit          Float    @default(0)
  adSpend         Float    @default(0)
  customerAcquisitionCost Float @default(0)
  lifetimeValue   Float    @default(0)
  conversionRate  Float    @default(0)
  roi             Float    @default(0)
  createdAt       DateTime @default(now())

  @@map("financial_metrics")
}

model PricingRecommendation {
  id              String   @id @default(cuid())
  state           String
  currentPrice    Float
  recommendedPrice Float
  competitorPrices String  // JSON array
  potentialProfit Float
  confidence      Float
  reasoning       String
  approved        Boolean  @default(false)
  approvedBy      String?
  approvedAt      DateTime?
  createdAt       DateTime @default(now())

  @@map("pricing_recommendations")
}

// IA & AUTOMATION
model AIRecommendation {
  id              String   @id @default(cuid())
  type            String   // 'pricing', 'marketing', 'service', 'budget'
  title           String
  description     String
  impact          String
  recommendation  String
  estimatedValue  Float
  approved        Boolean  @default(false)
  approvedBy      String?
  approvedAt      DateTime?
  implemented     Boolean  @default(false)
  implementedAt   DateTime?
  createdAt       DateTime @default(now())

  @@map("ai_recommendations")
}

model AICostTracking {
  id              String   @id @default(cuid())
  date            DateTime @default(now())
  tokensUsed      Int      @default(0)
  imagesGenerated Int      @default(0)
  videosGenerated Int      @default(0)
  cost            Float    @default(0)
  service         String   // 'gemini', 'image-generation', 'video-generation'
  createdAt       DateTime @default(now())

  @@map("ai_cost_tracking")
}

// Modèles NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Tâches de Conformité Intelligentes
model ComplianceTask {
  id          String   @id @default(cuid())
  userId      String
  companyId   String?
  name        String
  category    String   // "STATE_REPORT", "STATE_TAX", "LOCAL_COMPLIANCE", "INDUSTRY_SPECIFIC", "EMPLOYMENT", "DATA_PRIVACY"
  description String
  status      String   @default("PENDING") // "PENDING", "IN_PROGRESS", "COMPLETED", "OVERDUE"
  priority    String   @default("MEDIUM") // "LOW", "MEDIUM", "HIGH", "CRITICAL"
  dueDate     DateTime?
  completedAt DateTime?
  estimatedFee String?
  feeNotes    String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("compliance_tasks")
}

// Journal d'Audit pour la Tour de Contrôle
model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  userEmail String
  action    String
  details   Json?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// Système de Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // info, warning, error, success
  category  String   // compliance, payment, system, ai, security
  priority  String   // low, medium, high, urgent
  title     String
  message   String
  actionText String?
  actionUrl String?
  metadata  String?  // JSON string
  read      Boolean  @default(false)
  expiresAt DateTime?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// API Publique
model APIAccess {
  id          String   @id @default(cuid())
  userId      String
  apiKey      String   @unique
  name        String
  permissions String   // JSON string of allowed actions
  rateLimit   Int      @default(1000) // requests per hour
  isActive    Boolean  @default(true)
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_access")
}

// Webhooks
model Webhook {
  id        String   @id @default(cuid())
  userId    String
  url       String
  events    String   // JSON string of event types
  secret    String   // for signature verification
  isActive  Boolean  @default(true)
  lastTriggered DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

enum UserRole {
  VISITOR
  CLIENT
  CONSULTANT
  ADMIN
}

enum CompanyStatus {
  PENDING
  FORMING
  ACTIVE
  SUSPENDED
  CANCELLED
  DISSOLVED
}

enum SubscriptionType {
  ANNUAL
  MONTHLY
  CUSTOM
}

enum DocumentType {
  FORMATION_DOCUMENT
  OPERATING_AGREEMENT
  EIN_CERTIFICATE
  ANNUAL_REPORT
  TAX_DOCUMENT
  BOI_REPORT
  LEGAL_DOCUMENT
  BANK_DOCUMENT
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentType {
  SUBSCRIPTION
  CONSULTATION
  ADDON_SERVICE
  REFUND
}

enum MailAction {
  PENDING
  FORWARD
  SCAN
  DESTROY
  ARCHIVE
}

enum ConsultationStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_CLIENT
  RESOLVED
  CLOSED
}